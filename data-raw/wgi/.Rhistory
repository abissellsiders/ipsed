dt[congress == 116 & party_code == 328, ]
dt[party_code == 100, party_abbreviation = "DEM"]
dt[party_code == 200, party_abbreviation = "REP"]
dt[party_code == 328, party_abbreviation = "IND"]
dt[party_code == 100, party_abbreviation := "DEM"]
dt[party_code == 200, party_abbreviation := "REP"]
dt[party_code == 328, party_abbreviation := "IND"]
dt[, party_abbreviation := factor(party_abbreviation)]
require("ggplot2")
ggplot(dt[congress == 116, ], aes(x = nominate_dim1, y = nominate_dim2, label = party_abbreviation)) +
geom_label()
dt[party_code == 100, party_abbreviation := "DEM"]
dt[party_code == 200, party_abbreviation := "REP"]
dt[party_code == 328, party_abbreviation := "IND"]
dt[bioname == "KENNEDY, Joseph P. III", party_abbreviation := "Kennedy"]
dt[, party_abbreviation := factor(party_abbreviation)]
ggplot(dt[congress == 116, ], aes(x = nominate_dim1, y = nominate_dim2, label = party_abbreviation)) +
geom_label()
ggplot(dt[congress == 116, ], aes(x = nominate_dim1, y = nominate_dim2, label = party_abbreviation)) +
geom_text()
table(dt[["party_abbreviation"]])
table(dt[congress == 116, ][["party_abbreviation"]])
ggplot(dt[congress == 116, ], aes(x = nominate_dim1, y = nominate_dim2, label = party_abbreviation, color = party_abbreviation)) +
geom_text()
ggplot(dt[congress == 116, ], aes(x = nominate_dim1, y = nominate_dim2, color = party_abbreviation)) +
geom_point() +
geom_label(dt[bioname == "KENNEDY, Joseph P. III", ], aes(label = party_abbreviation))
ggplot(dt[congress == 116, ], aes(x = nominate_dim1, y = nominate_dim2, color = party_abbreviation)) +
geom_point() +
geom_label(dt[bioname == "KENNEDY, Joseph P. III", ], aes(x = nominate_dim1, y = nominate_dim2, label = party_abbreviation))
ggplot() +
geom_point(dt[congress == 116, ], aes(x = nominate_dim1, y = nominate_dim2, color = party_abbreviation)) +
geom_label(dt[bioname == "KENNEDY, Joseph P. III", ], aes(x = nominate_dim1, y = nominate_dim2, label = party_abbreviation))
?geom_point
ggplot() +
geom_point(data=dt[congress == 116, ], aes(x = nominate_dim1, y = nominate_dim2, color = party_abbreviation)) +
geom_label(data=dt[bioname == "KENNEDY, Joseph P. III", ], aes(x = nominate_dim1, y = nominate_dim2, label = party_abbreviation))
ggplot(data=dt[congress == 116 & party_abbreviation == "DEM", ], aes(x = nominate_dim1)) +
geom_density()
ggplot(data=dt[congress == 116 & party_abbreviation == "DEM", ], aes(x = nominate_dim1)) +
geom_density() +
geom_vline(xintercept = dt[congress == 116 & bioname == "KENNEDY, Joseph P. III", ][["nominate_dim1"]])
congress_n = 116
name = "KENNEDY, Joseph P. III"
abbreviation = "Kennedy"
dt[party_code == 100, party_abbreviation := "DEM"]
dt[party_code == 200, party_abbreviation := "REP"]
dt[party_code == 328, party_abbreviation := "IND"]
party_abbr = dt[congress == congress_n & bioname == name, ][["party_abbreviation"]]
dt[bioname == name, party_abbreviation := abbreviation]
dt[, party_abbreviation := factor(party_abbreviation)]
ggplot() +
geom_point(data=dt[congress == congress_n, ], aes(x = nominate_dim1, y = nominate_dim2, color = party_abbreviation)) +
geom_label(data=dt[congress == congress_n & bioname == name, ], aes(x = nominate_dim1, y = nominate_dim2, label = party_abbreviation))
ggplot(data=dt[congress == congress_n & party_abbreviation == party_abbr, ], aes(x = nominate_dim1)) +
geom_density() +
geom_vline(xintercept = dt[congress == congress_n & bioname == name, ][["nominate_dim1"]])
?get_senate_nominate
require("politicaldata")
require("data.table")
require("ggplot2")
dt = data.table(get_house_nominate(congress = "ALL"))
congress_n = 116
name = "KENNEDY, Joseph P. III"
abbreviation = "Kennedy"
dt[party_code == 100, party_abbreviation := "DEM"]
dt[party_code == 200, party_abbreviation := "REP"]
dt[party_code == 328, party_abbreviation := "IND"]
party_abbr = dt[congress == congress_n & bioname == name, ][["party_abbreviation"]]
dt[bioname == name, party_abbreviation := abbreviation]
dt[, party_abbreviation := factor(party_abbreviation)]
ggplot() +
geom_point(data=dt[congress == congress_n, ], aes(x = nominate_dim1, y = nominate_dim2, color = party_abbreviation)) +
geom_label(data=dt[congress == congress_n & bioname == name, ], aes(x = nominate_dim1, y = nominate_dim2, label = party_abbreviation))
ggplot(data=dt[congress == congress_n & party_abbreviation == party_abbr, ], aes(x = nominate_dim1)) +
geom_density() +
geom_vline(xintercept = dt[congress == congress_n & bioname == name, ][["nominate_dim1"]])
ecdata
install.packages("Ecdat")
require("ecdat")
require("Ecdat")
ecdata
?HSD.test
library(agricolae)
install.packages(agricolae)
install.packages("agricolae")
require(agricolae)
HHSD.test()
HSD.test()
?HSD.test()
?aov
geometric.mean(c(40582, 2176, 210, 174, 66, 66))
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
gm_mean(c(40582, 2176, 210, 174, 66, 66))
gm_mean(c(297288, 1615, 93, 209, 317, 15))
package_name = "IntlPolEcon"
root_wd = "C:/Users/desk/google_drive/research_new/_packages"
package_wd = paste0("C:/Users/desk/google_drive/research_new/_packages/", package_name)
common_wd = "C:/Users/desk/google_drive/research_new/_common"
library(IntlPolEcon)
library(data.table)
dt = get_maddison()
require("IntlPolEcon")
dt = get_maddison()
# download file
path = tempfile()
download.file("http://www.systemicpeace.org/inscr/p5v2018.xls", path, mode="wb")
# read from excel
polity_df = readxl::read_excel(path, sheet = "p5v2018")
# data.frame to data.table
polity_dt = data.table(polity_df)
library(data.table)
# data.frame to data.table
polity_dt = data.table(polity_df)
polity_dt
polity_dt[["polity_fragmentation"]]
polity_dt[["fragment"]]
unique(polity_dt[["fragment"]])
packages.update()
update.packages()
installr
install.packages("installr")
updateR()
installr:updateR()
installr::updateR()
c(21,13,35,5,33,10,17,56,35,20,50,22,45,9,40,9,1,2,24,38,6,5,45,22,24,25,3,13,12,13,33,60,10,7,64,9,26,1,16)
x = c(21,13,35,5,33,10,17,56,35,20,50,22,45,9,40,9,1,2,24,38,6,5,45,22,24,25,3,13,12,13,33,60,10,7,64,9,26,1,16)
mean(x)
length(x)
2.5 / length(x)
5 / length(x)
2 / length(x)
1 / 39
6 / length(x)
27.5 / length(x)
x = c("p", "p", "a", "p", "s", "a", "s", "a", "n", "n", "a", "n", "n", "n", "n", "n", "a", "a", "e", "n", "a", "a", "e", "a", "n", "s", "n", "n", "a", "n", "b", "s", "e", "b", "n", "a", "n", "b", "n", "n", "b", "a", "p", "n")
table(x)
table(c("p", "p", "a", "p", "s", "a", "s", "a", "n", "n", "a", "n", "n", "n", "n", "n", "a", "a", "e", "n", "a", "a", "e", "a", "n", "s", "n", "n", "a", "n", "b", "s", "e", "b", "n", "a", "n", "b", "n", "n", "b", "a", "p", "n"))
require("ipsed")
maddison_dt = get_maddison()
colnames(maddison_dt)[1] = "year"
maddison_dt = maddison_dt[-1, ]
maddison_dt = melt(maddison_dt, id.vars = "year")
colnames(maddison_dt) = c("year", "country", "rgdpnapc")
maddison_dt[, `:=`(year = as.numeric(year), rgdpnapc = as.numeric(rgdpnapc))]
maddison_dt[, rgdpnapc_sma_3 := sma(rgdpnapc, 3, 1)][, rgdpnapc_sma_10 := sma(rgdpnapc, 10, 1)]
maddison_dt[, rgdpnapc_delta := (rgdpnapc/shift(rgdpnapc) - 1)*100][, rgdpnapc_delta_sma_3 := sma(rgdpnapc_delta, 3, 1)][, rgdpnapc_delta_sma_10 := sma(rgdpnapc_delta, 10, 1)]
germany_dt = maddison_dt[grep("Germany", country), ]
ggplot(germany_dt) +
geom_line(aes(x = year, y = rgdpnapc_delta_sma_10, group = country), color = "grey") +
geom_line(aes(x = year, y = rgdpnapc_delta_sma_3, group = country), color = "red") +
geom_line(aes(x = year, y = rgdpnapc_delta, group = country), color = "black") +
geom_point(aes(x = year, y = rgdpnapc_delta, group = country), color = "black") +
geom_hline(yintercept = 0) +
geom_rect(aes(xmin = 1933, xmax = 1945, ymin = -Inf, ymax = Inf), fill = "yellow", alpha = 0.005) +
coord_cartesian(xlim = c(1880, 2020), ylim = c(-50, 25)) +
scale_x_continuous(breaks = seq(1880, 2020, 10)) +
scale_y_continuous(breaks = seq(-55, 25, 10)) +
theme_minimal() +
labs(title = "Change in real GDP per capita in 2011 USD")
library(data.table)
library(ggplot2)
colnames(maddison_dt)[1] = "year"
maddison_dt = maddison_dt[-1, ]
maddison_dt = melt(maddison_dt, id.vars = "year")
colnames(maddison_dt) = c("year", "country", "rgdpnapc")
maddison_dt[, `:=`(year = as.numeric(year), rgdpnapc = as.numeric(rgdpnapc))]
maddison_dt[, rgdpnapc_sma_3 := sma(rgdpnapc, 3, 1)][, rgdpnapc_sma_10 := sma(rgdpnapc, 10, 1)]
maddison_dt[, rgdpnapc_delta := (rgdpnapc/shift(rgdpnapc) - 1)*100][, rgdpnapc_delta_sma_3 := sma(rgdpnapc_delta, 3, 1)][, rgdpnapc_delta_sma_10 := sma(rgdpnapc_delta, 10, 1)]
germany_dt = maddison_dt[grep("Germany", country), ]
ggplot(germany_dt) +
geom_line(aes(x = year, y = rgdpnapc_delta_sma_10, group = country), color = "grey") +
geom_line(aes(x = year, y = rgdpnapc_delta_sma_3, group = country), color = "red") +
geom_line(aes(x = year, y = rgdpnapc_delta, group = country), color = "black") +
geom_point(aes(x = year, y = rgdpnapc_delta, group = country), color = "black") +
geom_hline(yintercept = 0) +
geom_rect(aes(xmin = 1933, xmax = 1945, ymin = -Inf, ymax = Inf), fill = "yellow", alpha = 0.005) +
coord_cartesian(xlim = c(1880, 2020), ylim = c(-50, 25)) +
scale_x_continuous(breaks = seq(1880, 2020, 10)) +
scale_y_continuous(breaks = seq(-55, 25, 10)) +
theme_minimal() +
labs(title = "Change in real GDP per capita in 2011 USD")
# download file
path = tempfile()
download.file("http://www.systemicpeace.org/inscr/p5v2018.xls", path, mode="wb")
# read from excel
polity_df = readxl::read_excel(path, sheet = "p5v2018")
# data.frame to data.table
polity_dt = data.table(polity_df)
require(data.table)
polity_dt[["INTERIM"]]
# data.frame to data.table
polity_dt = data.table(polity_df)
polity_dt[["interim"]]
View(polity_dt)
View(polity_dt[interim == 1, ])
View(polity_dt[!is.na(interim), ])
View(polity_dt[country == "Bahrain", ])
unique(polity_dt[["regtrans"]])
polity_dt = data.table(polity_df)
# better column names
colnames_new = c("scode" = "country_code",
"country" = "country_name",
"year" = "year",
"p5" = "polity_version",
"flag" = "polity_flagged",
"fragment" = "polity_fragmentation",
"interim" = "polity_score_interim",
"prior" = "polity_score_prior",
"post" = "polity_score_post",
"change" = "polity_score_change",
"regtrans" = "polity_regime_change",
"sf" = "polity_state_failure",
"durable" = "polity_durability",
"polity" = "polity_score",
"polity2" = "polity_score_interpolated",
"democ" = "democracy_score",
"autoc" = "autocracy_score",
"xrreg" = "executive_recruitment_regulation",
"xrcomp" = "executive_recruitment_competition",
"xropen" = "executive_recruitment_openness",
"xconst" = "executive_restraints",
"parreg" = "participation_regulation",
"parcomp" = "participation_competitiveness",
"eday" = "polity_end_day",
"emonth" = "polity_end_month",
"eyear"= "polity_end_year",
"bday" = "polity_begin_day",
"bmonth" = "polity_begin_month",
"byear" = "polity_begin_year")
colnames(polity_dt) = colnames_new[colnames(polity_dt)]
# remove extra columns
polity_dt = polity_dt[, colnames, with = FALSE]
# reorder columns
setcolorder(polity_dt, unname(colnames_new))
colnames
polity_dt = polity_dt[, colnames_new, with = FALSE]
polity_dt
?as.Date
?date
?Date
ISOdate()
ISOdate
?ISOdate
ISOdate(1998, 12, 1)
# convert dates
polity_dt[, polity_end := ISOdate(polity_end_year, polity_end_month, polity_end_day)]
polity_dt[, polity_begin := ISOdate(polity_begin_year, polity_begin_month, polity_begin_day)]
# download file
path = tempfile()
download.file("http://www.systemicpeace.org/inscr/p5v2018.xls", path, mode="wb")
# read from excel
polity_df = readxl::read_excel(path, sheet = "p5v2018")
# data.frame to data.table
polity_dt = data.table(polity_df)
# convert dates
polity_dt[, polity_end := ISOdate(eyear, emonth, eday)]
polity_dt[, polity_begin := ISOdate(byear, bmonth, bday)]
# better column names
colnames_new = c("scode" = "country_code",
"country" = "country_name",
"year" = "year",
"p5" = "polity_version",
"flag" = "polity_flagged",
"fragment" = "polity_fragmentation",
"interim" = "polity_score_interim",
"prior" = "polity_score_prior",
"post" = "polity_score_post",
"change" = "polity_score_change",
"regtrans" = "polity_regime_change",
"sf" = "polity_state_failure",
"durable" = "polity_durability",
"polity" = "polity_score",
"polity2" = "polity_score_interpolated",
"democ" = "democracy_score",
"autoc" = "autocracy_score",
"xrreg" = "executive_recruitment_regulation",
"xrcomp" = "executive_recruitment_competition",
"xropen" = "executive_recruitment_openness",
"xconst" = "executive_restraints",
"parreg" = "participation_regulation",
"parcomp" = "participation_competitiveness")
colnames(polity_dt) = colnames_new[colnames(polity_dt)]
# remove extra columns
polity_dt = polity_dt[, colnames_new, with = FALSE]
# reorder columns
setcolorder(polity_dt, unname(colnames_new))
# convert country names
long_convert = setNames(countries[["master_long"]], countries[["polity4_scode"]])
polity_dt[, country_name := long_convert[country_code]]
# convert country codes
short_convert = setNames(countries[["master_short"]], countries[["polity4_scode"]])
polity_dt[, country_code := short_convert[country_code]]
countries = ipsed::countries
# convert country names
long_convert = setNames(countries[["master_long"]], countries[["polity4_scode"]])
polity_dt[, country_name := long_convert[country_code]]
# convert country codes
short_convert = setNames(countries[["master_short"]], countries[["polity4_scode"]])
polity_dt[, country_code := short_convert[country_code]]
unique(polity_dt[, c("interim", "prior", "post", "change", "regtrans", "sf")])
# data.frame to data.table
polity_dt = data.table(polity_df)
unique(polity_dt[, c("interim", "prior", "post", "change", "regtrans", "sf"), with = FALSE])
View(unique(polity_dt[, c("interim", "prior", "post", "change", "regtrans", "sf"), with = FALSE]))
unique(polity_dt[["change"]])
View(unique(polity_dt[, c("interim", "prior", "post", "regtrans", "sf"), with = FALSE]))
View(polity[change == 88, ])
View(polity_dt[change == 88, ])
View(polity_dt[change == -66, ])
View(polity_dt[interim == -77, ])
View(polity_dt[country == "Afghanistan", ])
View(polity_dt[change != interim, ])
View(polity_dt[change == -88, ])
View(polity_dt[polity == -88, ])
View(polity_dt[interim != regtrans, ])
View(polity_dt[country == "Afghanistan", ])
View(unique(polity_dt[, c("interim", "prior", "post", "regtrans", "sf"), with = FALSE]))
polity_dt[is.na(sf) & interim == -66, ]
View(polity_dt[is.na(sf) & interim == -66, ])
View(polity_dt[change == 99, ])
package_name = "ipsed"
root_wd = paste0("C:/Users/", Sys.info()["effective_user"], "/google_drive/research/_packages")
package_wd = paste0(root_wd, "/", package_name)
common_wd = paste0("C:/Users/", Sys.info()["effective_user"], "/google_drive/research/_common")
setwd(package_wd)
devtools::document()
setwd(root_wd)
devtools::install(package_name)
install.packages("glue")
setwd(package_wd)
devtools::document()
setwd(root_wd)
devtools::install(package_name)
?ipsed::get_polity()
dt = get_polity()
setwd(package_wd)
devtools::document()
setwd(root_wd)
devtools::install(package_name)
dt = get_polity()
require(data.table)
# download file
path = tempfile()
download.file("http://www.systemicpeace.org/inscr/p5v2018.xls", path, mode="wb")
# read from excel
polity_df = readxl::read_excel(path, sheet = "p5v2018")
# data.frame to data.table
polity_dt = data.table(polity_df)
# convert dates
polity_dt[, polity_end := ISOdate(eyear, emonth, eday)]
polity_dt[, polity_begin := ISOdate(byear, bmonth, bday)]
#####
# convert standardized authority codes
#####
# prior & post removed -- unnecessary
# sf removed -- it's a combination of interim, polity, and change (except 1 instance)
# View(polity_dt[sf == 1 & !(polity %in% c(-66, -77, -88)) & !(interim %in% c(-66, -77, -88)) & !(change %in% c(-66, -77, -88, 96, 97, 98, 99)), ])
# View(polity_dt[country == "Burundi" & year %in% 1986:2006, ]) # Burundi 1996 -- unclear why this 1996 coup de etat would count as a state failure but others would not, eg: https://en.wikipedia.org/wiki/1990_Chadian_coup_d%27%C3%A9tat (invalid)
# regtrans removed -- it's a combination of interim, polity2, and change (except 3 instances, where it lags them)
# View(polity_dt[!(regtrans %in% c(-2,-1,0,1,2,3)) & !(regtrans == polity2) & !(regtrans == interim) & !(regtrans == change), ])
# View(polity_dt[country == "Haiti" & year %in% 2006:2018, ]) # Haiti 2016 -- regtrans of -77 carried over from prior year (possibly valid?)
# View(polity_dt[country == "Liberia" & year %in% 1986:2006, ]) # Liberia 1996 -- regtrans of -77 carried over from prior year (possibly valid?)
# View(polity_dt[country == "Congo Kinshasa" & year %in% 1955:1975, ]) # Congo Kinshasa 1965 -- implies country was created in 1960 & 1965 (invalid)
polity_dt[, `:=`(polity_occupation = -66 %in% c(interim, polity, change),
polity_anarchy = -77 %in% c(interim, polity, change),
polity_transition = -88 %in% c(interim, polity, change),
polity_transformation = 96 %in% c(interim, polity, change) | 97 %in% c(interim, polity, change),
polity_demise = 98 %in% c(interim, polity, change),
polity_creation = 99 %in% c(interim, polity, change)), by = c("scode", "year")]
# better column names
colnames_new = c("scode" = "country_code",
"country" = "country_name",
"year" = "year",
"p5" = "polity_version",
"flag" = "polity_flagged",
"durable" = "polity_durability",
"polity" = "polity_score",
"polity2" = "polity_score_interpolated",
"democ" = "polity_democracy",
"autoc" = "polity_autocracy",
"xrreg" = "executive_recruitment_regulation",
"xrcomp" = "executive_recruitment_competition",
"xropen" = "executive_recruitment_openness",
"xconst" = "executive_restraints",
"parreg" = "participation_regulation",
"parcomp" = "participation_competitiveness",
"polity_occupation" = "polity_occupation",
"polity_anarchy" = "polity_anarchy",
"polity_transition" = "polity_transition",
"polity_transformation" = "polity_transformation",
"polity_demise" = "polity_demise",
"polity_creation" = "polity_creation",
"fragment" = "polity_fragmentation")
colnames(polity_dt) = colnames_new[colnames(polity_dt)]
# remove extra columns
polity_dt = polity_dt[, colnames_new, with = FALSE]
# reorder columns
setcolorder(polity_dt, unname(colnames_new))
# convert country names
long_convert = setNames(countries[["master_long"]], countries[["polity4_scode"]])
polity_dt[, country_name := long_convert[country_code]]
# convert country codes
short_convert = setNames(countries[["master_short"]], countries[["polity4_scode"]])
polity_dt[, country_code := short_convert[country_code]]
# convert to factors
polity_dt[, polity_version := factor(polity_version, labels = c("Polity IV", "Polity 5"))]
polity_dt[, polity_flagged := factor(polity_flagged, labels = c("Confident", "Tentative", "Tenuous"))]
polity_dt[, polity_fragmentation := factor(polity_fragmentation, labels = c("0% fragmentation", "0-10% fragmentation", "10-25% fragmentation", "25-50% fragmentation"))]
setwd(package_wd)
devtools::document()
setwd(root_wd)
devtools::install(package_name)
dt = get_polity()
maddison_dt = international::get_maddison()
maddison_dt = ipsed::get_maddison()
polity_dt = ipsed::get_polity()
ipsed_dt = merge(maddison_dt, country_conversions, by = c("country_code", "country_name", "year"))
ipsed_dt = merge(maddison_dt, polity_dt, by = c("country_code", "country_name", "year"))
ipsed_dt = merge(maddison_dt, polity_dt, by = c("country_code", "country_name", "year"), all = TRUE)
View(ipsed_dt)
polity_dt
View(polity_dt)
View(countries)
unique(polity_dt[["country_code"]])
unique(maddison_dt[["country_code"]])
unique(ipsed_dt[["country_code"]])
ipsed_dt = merge(maddison_dt, polity_dt, by = c("country_name", "year"), all = TRUE)
unique(ipsed_dt[["country_code"]])
ipsed_dt
View(maddison_dt)
View(maddison_dt)
maddison_dt = ipsed::get_maddison()#[, country_code := NULL]
polity_dt = ipsed::get_polity()#[, country_code := NULL]
?merge
ipsed_dt = merge(maddison_dt, polity_dt, by = c("country_name", "year"), all = TRUE)
View(ipsed_dt)
ipsed_dt = merge(maddison_dt, polity_dt, by = c("country_code", "country_name", "year"), all = TRUE)
View(ipsed_dt)
View(ipsed_dt[, !is.na(country_code)])
View(ipsed_dt[!is.na(country_code), ])
View(ipsed_dt[is.na(country_code), ])
View(polity_dt)
View(maddison_dt)
require(data.table)
path = tempfile()
download.file("http://www.columbia.edu/~aw2951/WimmerMin1.0.xls", path, mode="wb")
# read from excel
fetns_df = readxl::read_excel(path, sheet = "WimmerMin1.0")
# data.frame to data.table
fetns_dt = data.table(fetns_df)
# whether war ended in that year
fetns_dt[, war_ended := (yrend == year)]
fetns_dt[, area_mountainous := exp(lmtnest)]
fetns_dt[, oil_production := oil * 1000]
unique(fetns_dt[["country"]])
unique(fetns_dt[, c("cowcode", "country"), with=FALSE])
dt = unique(fetns_dt[, c("cowcode", "country"), with=FALSE])
fwrite(dt, "temp.csv")
getwd9)
getwd()
polity_dt[["countries"]]
polity_dt[["country_names"]]
polity_dt[["country_name"]]
unique(polity_dt[["country_name"]])
unique(polity_dt[, c("country_name", "imppower"), with=FALSE])
unique(polity_dt[, c("country_name", "imperial_name"), with=FALSE])
unique(fetns_dt[, c("country_name", "imppower"), with=FALSE])
unique(fetns_dt[, c("country", "imppower"), with=FALSE])
unique(fetns_dt[, c("country", "imppower"), with=FALSE])[!is.na(imppower), ]
View(unique(fetns_dt[, c("country", "imppower"), with=FALSE])[!is.na(imppower), ])
2010_dt
# 2020: <https://www.cafonline.org/about-us/publications/2019-publications/caf-world-giving-index-10th-edition>
# 2018: <https://www.cafonline.org/about-us/publications/2018-publications/caf-world-giving-index-2018>
# 2017: <https://www.cafonline.org/about-us/publications/2017-publications/caf-world-giving-index-2017>
# 2016: <https://www.cafonline.org/about-us/publications/2016-publications/caf-world-giving-index-2016>
# 2015: <https://www.cafonline.org/about-us/publications/2015-publications/caf-world-giving-index-2015>
# 2014: <https://www.cafonline.org/about-us/publications/2014-publications/caf-world-giving-index-2014>
# 2013: <https://www.cafonline.org/about-us/publications/2013-publications/world-giving-index-2013>
# 2012: <https://www.cafonline.org/about-us/publications/2012-publications/world-giving-index-2012>
# 2011: <https://www.cafonline.org/about-us/publications/2011-publications/world-giving-index-2011>
# 2010: <https://www.cafonline.org/about-us/publications/2010-publications/world-giving-index>
dt_2010 = readxl::read_xlsx("caf_wgi_2010_34-38.xlsx")
# 2020: <https://www.cafonline.org/about-us/publications/2019-publications/caf-world-giving-index-10th-edition>
# 2018: <https://www.cafonline.org/about-us/publications/2018-publications/caf-world-giving-index-2018>
# 2017: <https://www.cafonline.org/about-us/publications/2017-publications/caf-world-giving-index-2017>
# 2016: <https://www.cafonline.org/about-us/publications/2016-publications/caf-world-giving-index-2016>
# 2015: <https://www.cafonline.org/about-us/publications/2015-publications/caf-world-giving-index-2015>
# 2014: <https://www.cafonline.org/about-us/publications/2014-publications/caf-world-giving-index-2014>
# 2013: <https://www.cafonline.org/about-us/publications/2013-publications/world-giving-index-2013>
# 2012: <https://www.cafonline.org/about-us/publications/2012-publications/world-giving-index-2012>
# 2011: <https://www.cafonline.org/about-us/publications/2011-publications/world-giving-index-2011>
# 2010: <https://www.cafonline.org/about-us/publications/2010-publications/world-giving-index>
wd = "C:\Users\desk\google_drive\research\_packages\ipsed\data-raw\wgi_pdfs"
setwd(wd)
# 2020: <https://www.cafonline.org/about-us/publications/2019-publications/caf-world-giving-index-10th-edition>
# 2018: <https://www.cafonline.org/about-us/publications/2018-publications/caf-world-giving-index-2018>
# 2017: <https://www.cafonline.org/about-us/publications/2017-publications/caf-world-giving-index-2017>
# 2016: <https://www.cafonline.org/about-us/publications/2016-publications/caf-world-giving-index-2016>
# 2015: <https://www.cafonline.org/about-us/publications/2015-publications/caf-world-giving-index-2015>
# 2014: <https://www.cafonline.org/about-us/publications/2014-publications/caf-world-giving-index-2014>
# 2013: <https://www.cafonline.org/about-us/publications/2013-publications/world-giving-index-2013>
# 2012: <https://www.cafonline.org/about-us/publications/2012-publications/world-giving-index-2012>
# 2011: <https://www.cafonline.org/about-us/publications/2011-publications/world-giving-index-2011>
# 2010: <https://www.cafonline.org/about-us/publications/2010-publications/world-giving-index>
wd = "C:/Users/desk/google_drive/research/_packages/ipsed/data-raw/wgi_pdfs"
setwd(wd)
dt_2010 = readxl::read_xlsx("caf_wgi_2010_34-38.xlsx")
colnames(dt_2010) = c("country_name", "wgi_overall_rank", "wgi_overall_score", "wgi_money", "wgi_time", "wgi_stranger", "wellbeing")
dt_2010
